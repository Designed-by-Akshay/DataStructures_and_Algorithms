Non-Constructible Change 
--------------------------
Given an array of positive integers representing the values of coins in your possession, write a function that returns the minimum 
amount of change (the minimum sum of money) that you cannot create. The given coins can have any positive integer value and aren't
necessarily unique (i.e., you can have multiple coins of the same value).

For example, if you're given coins = [1, 2, 5], the minimum amount of change that you can't create is 4 . If you're given no coins
the minimum amount of change that you can't create is

Sample Input
--------------
coins = [5, 7, 1, 1, 2, 3, 22]

Sample Output
--------------
20


Solution
--------
def nonConstructibleChange(coins):
    coins.sort()
    print(coins)
    change_possible = 0
    print(change_possible)
    for coin in coins:
        print(coin)
        if coin > change_possible +1:
            return change_possible+1
        change_possible += coin
        print('change possible',change_possible)
        
    return change_possible+1
    
    
Explanation
-----------

If pesented with questions like this the first approach can be to sort the array to figure out the pattern
now before tackling the problem as given in the question the minimum amount of change that
you can't create is 1

so a pattern is found that 
lets consider an array 
[1 2 3 9]

change = 0 
change = 0+1 = 1
not 2nd element we see that 2 is >= 1+1 is false 
change = 1+2=3

bnow for 3rd element we see that 
3 >=3+3 = 6

and finally for the last element 
9 >=6+1 is false 
so the minimum amount that one cant create is 7


